/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.scalar.conf 17798 2009-10-27 06:44:54Z magfr $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "semsStats.h"
#include "AmSession.h"

/** Initializes the semsStats module */
void
init_semsStats(void)
{
    const oid semsStatsCallsAvg_oid[] = { 1,3,6,1,4,1,39771,1,1,1 };
    const oid semsStatsCallsMax_oid[] = { 1,3,6,1,4,1,39771,1,1,2 };
    const oid semsStatsCpsAvg_oid[] = { 1,3,6,1,4,1,39771,1,1,3 };
    const oid semsStatsCpsMax_oid[] = { 1,3,6,1,4,1,39771,1,1,4 };

  DEBUGMSGTL(("semsStats", "Initializing\n"));

    netsnmp_register_scalar(
        netsnmp_create_handler_registration("semsStatsCallsAvg", handle_semsStatsCallsAvg,
                               semsStatsCallsAvg_oid, OID_LENGTH(semsStatsCallsAvg_oid),
                               HANDLER_CAN_RONLY
        ));
    netsnmp_register_scalar(
        netsnmp_create_handler_registration("semsStatsCallsMax", handle_semsStatsCallsMax,
                               semsStatsCallsMax_oid, OID_LENGTH(semsStatsCallsMax_oid),
                               HANDLER_CAN_RONLY
        ));
    netsnmp_register_scalar(
        netsnmp_create_handler_registration("semsStatsCpsAvg", handle_semsStatsCpsAvg,
                               semsStatsCpsAvg_oid, OID_LENGTH(semsStatsCpsAvg_oid),
                               HANDLER_CAN_RONLY
        ));
    netsnmp_register_scalar(
        netsnmp_create_handler_registration("semsStatsCpsMax", handle_semsStatsCpsMax,
                               semsStatsCpsMax_oid, OID_LENGTH(semsStatsCpsMax_oid),
                               HANDLER_CAN_RONLY
        ));
}

int
handle_semsStatsCallsAvg(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    /* We are never called for a GETNEXT if it's registered as a
       "instance", as it's "magically" handled for us.  */

    /* a instance handler also only hands us one request at a time, so
       we don't need to loop over a list of requests; we'll only get one. */

    int calls_avg;
    switch(reqinfo->mode) {

        case MODE_GET:
	    snmp_log(LOG_INFO,"handle_semsStatsCallsAvg.\n");
	    calls_avg = AmSession::getAvgSessionNum();
            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                     &calls_avg,
                                     sizeof(calls_avg));
            break;


        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_semsStatsCallsAvg\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}
int
handle_semsStatsCallsMax(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    /* We are never called for a GETNEXT if it's registered as a
       "instance", as it's "magically" handled for us.  */

    /* a instance handler also only hands us one request at a time, so
       we don't need to loop over a list of requests; we'll only get one. */

    int calls_max;
    switch(reqinfo->mode) {

        case MODE_GET:
	    snmp_log(LOG_INFO,"handle_semsStatsCallsMax.\n");
	    calls_max = AmSession::getMaxSessionNum();
            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                     &calls_max,
                                     sizeof(calls_max));
            break;


        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_semsStatsCallsMax\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}
int
handle_semsStatsCpsAvg(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    /* We are never called for a GETNEXT if it's registered as a
       "instance", as it's "magically" handled for us.  */

    /* a instance handler also only hands us one request at a time, so
       we don't need to loop over a list of requests; we'll only get one. */

    int cps_avg;
    switch(reqinfo->mode) {

        case MODE_GET:
	    snmp_log(LOG_INFO,"handle_semsStatsCpsAvg.\n");
	    cps_avg = AmSession::getAvgCPS();
            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                     &cps_avg,
                                     sizeof(cps_avg));
            break;


        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_semsStatsCpsAvg\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}
int
handle_semsStatsCpsMax(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    /* We are never called for a GETNEXT if it's registered as a
       "instance", as it's "magically" handled for us.  */

    /* a instance handler also only hands us one request at a time, so
       we don't need to loop over a list of requests; we'll only get one. */
    
    int cps_max;
    switch(reqinfo->mode) {

        case MODE_GET:
	    snmp_log(LOG_INFO,"handle_semsStatsCpsMax.\n");
	    cps_max = AmSession::getMaxCPS();
            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                     &cps_max,
                                     sizeof(cps_max));
            break;


        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_semsStatsCpsMax\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}
